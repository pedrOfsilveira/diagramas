@startuml

enum EstiloInvestidor {
  CONSERVADOR
  MODERADO
  AGRESSIVO
}

enum TipoAtivo {
  ACAO
  FII
  RENDA_FIXA
  CRIPTO
}

enum TipoTransacao {
  COMPRA
  VENDA
  DIVIDENDO
}

enum StatusConvite {
  PENDENTE
  ACEITO
  RECUSADO
}

enum NivelRisco {
    BAIXO
    MEDIO
    ALTO
}

enum TipoSimulacao {
  COMPRA_DE_ATIVO
  ESTRATEGIA_DE_INVESTIMENTO
  PROJECAO_DE_FUTURO
}

enum StatusDesafioUsuario {
  NAO_INICIADO
  EM_ANDAMENTO
  CONCLUIDO_COM_SUCESSO
  TENTATIVA_FALHA
}

enum TipoConteudoEducacional {
  QUIZ
  DESAFIO
  ARTIGO_TEXTUAL
  VIDEO_AULA
}

class Pergunta {
  - texto: String
  - opcoes: List<String>
  - respostaCorreta: Integer
}

class RelatorioProgresso {
    - topicosAprendidos: List<String>
    - simulacoesRealizadas: Integer
    - errosComuns: List<String>
    - sugestoes: List<String>
}

class DadosGrafico {
    - eixos: Map
    - pontos: List<Ponto>
}

class ResultadoSimulacao {
    - projecao: Decimal
    - analiseRisco: String
}

class SugestaoAlocacao {
    - alocacao: Map<TipoAtivo, Percentual>
}

class Preco {
    - data: DateTime
    - valor: Decimal
}

class EntradaRanking {
    - usuario: Usuario
    - pontuacao: Decimal
}

class Usuario {
    - idUsuario: Integer
    - nome: String
    - email: String
    - senhaHash: String
    - primeiroAcesso: Boolean
    - nivel: Integer
    + cadastrar(nome, email, senha): void
    + login(email, senha): Boolean
    + logout(): void
    + visualizarDados(): Map
    + alterarDados(novosDados): void
    + iniciarOnboarding(): void
    + responderQuestionarioPerfil(respostas): void
    + enviarConvite(usuarioAlvo): void
    + gerenciarConvite(convite, acao): void
    + removerAmigo(amigo): void
    + visualizarPerfilAmigo(amigo): Perfil
    + getPerfil(): Perfil
    + getCarteira(): Carteira
    + getAmigos(): List<Usuario>
    + getConvites(): List<Convite>
    + getConquistas(): List<Conquista>
    + getNivel(): Integer
    + getProgressoEducacional(): RelatorioProgresso
}

class Administrador extends Usuario {
    - nivelPermissao: Integer
    + gerenciarConteudo(conteudoId, acao): void
    + moderarInteracao(usuarioId, tipo, acao): void
    + monitorarSistema(): Map
    + gerenciarUsuario(usuarioId, acao): void
    + adicionarNoticia(noticia): void
    + editarGlossario(termo, definicao): void
}

class Perfil {
    - idPerfil: Integer
    - estiloInvestidor: EstiloInvestidor
    - dadosVisiveis: Map
    + definirEstiloInvestidor(respostasQuestionario): void
    + getEstiloInvestidor(): EstiloInvestidor
    + setEstiloInvestidor(estilo: EstiloInvestidor): void
    + visualizarDados(): Map
    + alterarDados(novosDados): void
}

class Carteira {
    - idCarteira: Integer
    - saldo: Decimal
    + getSaldoAtual(): Decimal
    + getRentabilidadeTotal(): Decimal
    + getRentabilidadeAtivo(ativo: Ativo): Decimal
    + listarAtivosCarteira(): List<AtivoCarteira>
    + getHistorico(): List<Transacao>
    + getAnaliseDiversificacao(): String
    + adicionarTransacao(transacao: Transacao): void
    + getGraficoRentabilidade(): DadosGrafico
    - recalcularValores(): void
    + calcularValorCompra(preco: Decimal, quantidade: Integer): Decimal
    + verificarSaldoSuficiente(valor: Decimal): Boolean
    + efetuarCompra(ativoId: Integer, quantidade: Integer, valorTotal: Decimal): Map
    + subtrairDoSaldo(valor: Decimal): void
    + verificarQuantidadeDisponivel(ativoId: Integer, quantidade: Integer): Boolean
    + calcularValorTotalVenda(preco: Decimal, quantidade: Integer): Decimal
    + efetuarVendaAtivo(ativoId: Integer, quantidade: Integer, valorTotal: Decimal): Map
    + adicionarAoSaldo(valor: Decimal): void
}

class Ativo {
    - idAtivo: Integer
    - nome: String
    - ticker: String
    - tipo: TipoAtivo
    - precoAtual: Decimal
    - historicoPrecos: List<Preco>
    - riscoAssociado: NivelRisco
    - descricao: String
    + getDetalhes(): Map
    + getPrecoAtual(): Decimal
    + getRisco(): NivelRisco
    + verificarCompatibilidade(perfilInvestidor: EstiloInvestidor): Boolean
    + simularCompra(valor: Decimal, perfilInvestidor: Perfil): ResultadoSimulacao
    + atualizarPreco(novoPreco: Decimal): void
}

class Transacao {
    - idTransacao: Integer
    - dataHora: DateTime
    - tipo: TipoTransacao
    - quantidade: Decimal
    - precoUnitario: Decimal
    - valorTotal: Decimal
    + getDetalhesTransacao(): Map
}

class Simulacao {
    - idSimulacao: Integer
    - dataHora: DateTime
    - tipoSimulacao: TipoSimulacao
    - entradas: Map
    - saidas: Map
    + simularCompraAtivo(ativo: Ativo, valor: Decimal): ResultadoSimulacao
    + simularEstrategia(valorDisponivel: Decimal): SugestaoAlocacao
    + gerarProjecaoFuturo(aporteMensal: Decimal): DadosGrafico
    + calcularProjecaoGeral(dadosEntrada: Map, taxasRetornadas: Map): ResultadoSimulacao
    - analisarRisco(params: Map): Map
}

abstract class ConteudoEducacional {
    - idConteudo: Integer
    - titulo: String
    - descricao: String
    # tipo: TipoConteudoEducacional
    # areaConhecimento: String
    + getTitulo(): String
    + getDescricao(): String
    + {abstract} apresentar(): Map
    + {abstract} submeter(usuarioId: Integer, dados: Map): Map
}

class Desafio extends ConteudoEducacional {
    - statusUsuario: Map<Usuario, StatusDesafioUsuario>
    - recompensa: Conquista
    + iniciarDesafio(usuario: Usuario): void
    + submeterResultado(usuarioId: Integer, resultado: Map): Map
    + getDetalhes(): Map
}

class Quiz extends ConteudoEducacional {
    - perguntas: List<Pergunta>
    - pontuacoes: Map<Usuario, Integer>
    + iniciarQuiz(): List<Pergunta>
    + submeterRespostas(usuario: Usuario, respostas: Map): Map
    + getTitulo(): String
    + getPerguntas(): List<Pergunta>
    + verificarResposta(perguntaId: Integer, respostaUsuario: String): Boolean
    + calcularResultadoFinal(): Map
}

class TermoGlossario {
    - idTermo: Integer
    - palavra: String
    - definicao: String
    + getPalavra(): String
    + getDefinicao(): String
    + {static} buscar(chave: String): List<TermoGlossario>
    + {static} listarTodos(): List<TermoGlossario>
}

class Noticia {
    - idNoticia: Integer
    - titulo: String
    - resumo: String
    - link: String
    - dataPublicacao: DateTime
    + getTitulo(): String
    + getResumo(): String
    + {static} listarRecentes(): List<Noticia>
}

class Conquista {
    - idConquista: Integer
    - nome: String
    - descricao: String
    - iconeURL: String
    + getNome(): String
    + getDescricao(): String
    + {static} listarTodas(): List<Conquista>
}

class Ranking {
    - posicoes: List<EntradaRanking>
    + getRankingAtual(): List<EntradaRanking>
    - calcularPosicoes(): void
}

class Convite {
    - idConvite: Integer
    - status: StatusConvite
    - dataEnvio: DateTime
    + aceitar(): void
    + recusar(): void
    + getStatus(): StatusConvite
    + getDados(): Map
    + arquivar(): void
}

class AtivoCarteira {
  - quantidade: Decimal
  - precoMedioCompra: Decimal
  + getQuantidade(): Decimal
  + setQuantidade(novaQuantidade: Decimal): void
  + adicionarQuantidade(valor: Decimal): void
  + removerQuantidade(valor: Decimal): void
  + getValorTotalAtual(precoAtualAtivo: Decimal): Decimal
}

class DesafioController {
    + carregarDesafiosDisponiveis(): List<Desafio>
    + iniciarDesafio(usuarioId: Integer, desafioId: Integer): Desafio
    + submeterSolucaoDesafio(usuarioId: Integer, desafioId: Integer, solucao: Map): Map
}

class ProgressoService {
    + marcarDesafioComoConcluido(usuarioId: Integer, desafioId: Integer): Map
    + adicionarExperiencia(tema: String, pontos: Integer): Map
    + atualizarEstatisticasQuiz(quizId: Integer, resultado: Map): Map
}

class RecompensaService {
    + concederRecompensaDesafio(usuarioId: Integer, desafioId: Integer): Map
    + concederRecompensaQuiz(usuarioId: Integer, quizId: Integer, resultado: Map): Map
}

class AtivoController {
    + comprarAtivo(usuarioId: Integer, ativoId: Integer, quantidade: Integer): Map
    + venderAtivo(usuarioId: Integer, ativoId: Integer, quantidade: Integer): Map
}

class PerfilController {
    + solicitarQuestionarioPerfil(): List<Pergunta>
    + submeterRespostasQuestionario(usuarioId: Integer, respostas: Map): Map
}

class Questionario {
    - idQuestionario: Integer
    - nome: String
    - perguntas: List<Pergunta>
    + getPerguntas(): List<Pergunta>
}

class NoticiaController {
    + carregarNoticiasDoMercado(): List<Noticia>
}

class PedidoController {
    + carregarPedidosPendentes(usuarioId: Integer): List<Convite>
    + processarDecisaoPedido(conviteId: Integer, usuarioId: Integer, acao: String): Map
}

class AmizadeService {
    + registrarNovaAmizade(usuarioId1: Integer, usuarioId2: Integer): Map
    + desfazerAmizade(usuarioId1: Integer, usuarioId2: Integer): Map
}

class QuizController {
    + carregarQuizzesDisponiveis(): List<Quiz>
    + iniciarQuiz(quizId: Integer): Quiz
    + submeterResposta(quizId: Integer, perguntaId: Integer, respostaUsuario: String): Map
}

class AuthController {
    + requisitarLogin(email: String, senha: String): Map
    + requisitarCadastro(dadosCadastro: Map): Map
    + requisitarLogout(usuarioId: Integer): void
}

class SessaoUsuario {
    - idSessao: String
    - usuarioId: Integer
    - token: String
    - dataCriacao: DateTime
    - dataExpiracao: DateTime
    + SessaoUsuario(uid: Integer, token: String) ' Construtor para new/init
    + isValid(): Boolean
    + prolongarSessao(): void
}

class SimulacaoController {
    + solicitarSimulacao(dadosEntrada: Map): Map
}

class ProgressoController {
    + solicitarRelatorioProgresso(usuarioId: Integer): RelatorioProgresso
}

class GeradorRelatorioService {
    + gerarRelatorioParaUsuario(usuarioId: Integer): RelatorioProgresso
}


Administrador --|> Usuario
Desafio --|> ConteudoEducacional
Quiz --|> ConteudoEducacional

Usuario "1" *-- "1" Perfil
Usuario "1" *-- "1" Carteira
Usuario "1" --> "1" RelatorioProgresso : possui
Usuario "0..*" -- "0..*" Usuario : amigos
Usuario "0..*" -- "1" Convite : remetente
Usuario "0..*" -- "1" Convite : destinatario
Usuario "0..*" -- "0..*" Conquista : possui
Usuario "0..*" -- "0..*" ConteudoEducacional : interage com
Usuario "0..*" -- "0..*" TermoGlossario : favorita

Ativo "1" *-- "0..*" Preco : historico
Quiz "1" *-- "1..*" Pergunta
Carteira ..> DadosGrafico : gera
Simulacao ..> ResultadoSimulacao : gera
Simulacao ..> SugestaoAlocacao : gera
Ranking "1" *-- "0..*" EntradaRanking
EntradaRanking "1" --> "1" Usuario

Carteira "1" -- "0..*" AtivoCarteira
Ativo "1" -- "0..*" AtivoCarteira
Carteira "1" *-- "0..*" Transacao
Transacao "0..*" --> "1" Ativo

Simulacao "0..*" --> "1" Usuario : realizada por

Administrador --> Noticia : gerencia
Administrador --> TermoGlossario : gerencia

DesafioController ..> Desafio : gerenciaOuUsa
DesafioController ..> ProgressoService : utiliza
DesafioController ..> RecompensaService : utiliza

QuizController ..> Quiz : gerenciaOuUsa
QuizController ..> ProgressoService : utiliza
QuizController ..> RecompensaService : utiliza

AtivoController ..> Carteira : gerencia
AtivoController ..> Ativo : consulta
AtivoController ..> Perfil : consulta
AtivoController ..> Transacao : registra

PerfilController ..> Questionario : usa
PerfilController ..> Perfil : atualiza

NoticiaController ..> Noticia : gerenciaOuUsa

PedidoController ..> Convite : gerencia
PedidoController ..> AmizadeService : utiliza

AmizadeService ..> Usuario : gerenciaAmigos

AuthController ..> Usuario : autenticaECria
AuthController ..> SessaoUsuario : gerencia

SimulacaoController ..> Simulacao : coordena
SimulacaoController ..> ServicoBrapi : consulta ' Assumindo ServicoBrapi é um participante externo não modelado aqui

ProgressoController ..> GeradorRelatorioService : solicita
ProgressoController ..> Usuario : associaRelatorio
GeradorRelatorioService ..> RelatorioProgresso : gera
GeradorRelatorioService ..> ProgressoService : consulta
GeradorRelatorioService ..> Simulacao : consulta

ProgressoService ..> Usuario : atualizaProgresso
RecompensaService ..> Usuario : premiaUsuario
RecompensaService ..> Conquista : concedeConquista
RecompensaService ..> Carteira : creditaValor

@enduml