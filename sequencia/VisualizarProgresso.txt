Explicação do Diagrama de Sequência: Visualizar Relatório de Progresso Educacional

Este diagrama de sequência descreve o processo pelo qual um usuário do aplicativo Blue Bee visualiza seu relatório de progresso educacional. Ele detalha as interações desde a solicitação do usuário até a coleta de dados de diversas fontes e a apresentação final do relatório consolidado.

**Participantes (As Colunas Verticais no Diagrama):**

* **:Usuario (User)**: O ator que deseja visualizar seu progresso educacional.
* **:TelaRelatorio (Tela)**: Representa a interface gráfica (a tela) onde o relatório de progresso é solicitado e exibido.
* **:ProgressoController (Controller)**: O componente lógico responsável por coordenar a geração e apresentação do relatório de progresso.
* **:GeradorRelatorioService (GeradorServ)**: Um serviço especializado em coletar todas as informações necessárias de diferentes partes do sistema (quizzes, desafios, simulações, tempo de uso) e compilar o relatório.
* **:RelatorioProgresso (RelatorioObj)**: O objeto que encapsula os dados consolidados do relatório de progresso do usuário.

**Fluxo Detalhado das Interações:**

1.  **Acesso à Funcionalidade:**
    * O `:Usuario` navega no aplicativo e acessa a seção "Relatório de Progresso" através da `:TelaRelatorio`. A `:TelaRelatorio` é ativada.

2.  **Solicitação do Relatório:**
    * A `:TelaRelatorio` envia uma mensagem `solicitarRelatorioProgresso` para o `:ProgressoController`, informando o `usuarioId` para o qual o relatório deve ser gerado. O `Controller` é ativado.

3.  **Geração do Relatório pelo Serviço:**
    * O `:ProgressoController` delega a tarefa de compilação dos dados para o `:GeradorRelatorioService` através da mensagem `gerarRelatorioParaUsuario`. O `:GeradorRelatorioService` é ativado.
    * Internamente, o `:GeradorRelatorioService` executa uma lógica complexa para buscar e processar as informações necessárias:
        * Tópicos aprendidos (coletados a partir das interações com quizzes e desafios).
        * Número de simulações de investimento realizadas.
        * Erros mais comuns cometidos pelo usuário.
        * Tempo total que o usuário investiu utilizando o aplicativo.
        * Geração de sugestões de melhoria personalizadas.
    * Após coletar e processar todos os `dadosCompiladosDoRelatorio`, o `:GeradorRelatorioService` cria (`create participant`) uma nova instância do objeto `:RelatorioProgresso`.
    * Ele envia uma mensagem (por exemplo, `new` ou um método de inicialização) para o `:RelatorioProgresso` recém-criado, passando os dados compilados. O `:RelatorioProgresso` é ativado.
    * O `:RelatorioProgresso` confirma sua criação e armazena os dados, retornando um `relatorioPronto` ao `:GeradorRelatorioService`. O `:RelatorioProgresso` é desativado.
    * O `:GeradorRelatorioService` retorna o `relatorioCompleto` para o `:ProgressoController`. O `:GeradorRelatorioService` é desativado.

4.  **Exibição do Relatório:**
    * O `:ProgressoController` envia o `relatorioCompleto` para a `:TelaRelatorio` através da mensagem `exibirRelatorio`. O `Controller` é desativado.
    * A `:TelaRelatorio` recebe os dados do relatório e os formata para exibição, mostrando o "Relatório Detalhado de Progresso" para o `:Usuario`.

5.  **Finalização:**
    * A `:TelaRelatorio` é desativada após a exibição do relatório ou quando o usuário navega para outra tela.

**Conclusão do Diagrama:**
Este diagrama de sequência ilustra como o sistema coleta e consolida diversas informações sobre a atividade de aprendizado do usuário para gerar um relatório de progresso abrangente. Ele demonstra a utilização de um serviço especializado (`:GeradorRelatorioService`) para encapsular a complexidade da coleta de dados e a criação dinâmica de um objeto de relatório (`:RelatorioProgresso`) antes de apresentar as informações ao usuário através da interface.