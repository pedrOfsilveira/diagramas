Explicação do Diagrama de Sequência: Comprar Ativo (Fluxo Condicional Corrigido)

Este diagrama de sequência ilustra o processo completo de compra de um ativo no aplicativo Blue Bee. Ele detalha as interações entre o usuário, a interface do sistema, os componentes de controle e os objetos de dados, incluindo as verificações de compatibilidade de perfil do investidor e de saldo disponível.

**Participantes (As Colunas Verticais no Diagrama):**

* **:Usuario (User)**: O ator que inicia a ação de comprar um ativo.
* **:TelaAtivos (Tela)**: Representa a interface gráfica (a tela) com a qual o usuário interage para selecionar o ativo e a quantidade, e para visualizar os resultados.
* **:AtivoController (Controller)**: O componente lógico central que coordena todo o processo de compra, desde a validação inicial até a efetivação da transação.
* **:Perfil (Perfil)**: Representa o perfil de investidor do usuário, consultado para verificar a adequação do ativo.
* **:Carteira (Carteira)**: Representa a carteira de investimentos virtual do usuário, onde o ativo será adicionado e de onde o valor da compra será debitado.
* **:Ativo (Ativo)**: Representa o ativo financeiro específico que o usuário deseja comprar.
* **:AtivoCarteira (AtivoCarteira)**: Uma classe de ligação que armazena a quantidade de um determinado ativo dentro de uma carteira específica.
* **:Transacao (Transacao)**: Representa o registro da operação de compra.

**Fluxo Detalhado das Interações:**

1.  **Início da Compra:**
    * O `:Usuario` interage com a `:TelaAtivos` para iniciar o processo de compra.
    * Ele escolhe o ativo desejado e a quantidade, e clica em "Confirmar" na tela.

2.  **Solicitação ao Controlador:**
    * A `:TelaAtivos` envia uma mensagem `comprarAtivo` para o `:AtivoController` com os detalhes da compra (ID do usuário, ID do ativo, quantidade).

3.  **Obtenção de Dados e Verificações Iniciais:**
    * O `:AtivoController` solicita ao `:Ativo` os seus dados (como preço).
    * O `:AtivoController` solicita ao `:Perfil` as informações do perfil de investidor do usuário.
    * O `:AtivoController` pede ao `:Ativo` para verificar se ele é `ehCompativel` com o perfil do usuário.

4.  **Tratamento da Compatibilidade do Ativo (Bloco `alt naoEhCompativel / else ehCompativel`):**
    * **Caminho "naoEhCompativel"**: (Se o ativo não for compatível com o perfil do usuário)
        * O `Controller` instrui a `Tela` a pedir uma confirmação extra ao `Usuario` (`PedirConfirmacaoIncompatibilidade`), exibindo uma mensagem como "Ativo fora do perfil. Continuar?".
        * O `Usuario` envia sua `Resposta(confirmou)` para a `Tela`.
        * **Bloco `alt RespostaDoUsuarioEhNaoConfirmar / else RespostaDoUsuarioEhConfirmar` (Decisão do Usuário):**
            * **Se "RespostaDoUsuarioEhNaoConfirmar"**: A `Tela` informa o `Controller` que a compra foi cancelada. Mensagens de "Compra cancelada" são trocadas, e os participantes `:Controller` e `:Tela` são desativados. O fluxo de compra é interrompido neste ponto para este cenário.
            * **Se "RespostaDoUsuarioEhConfirmar"**: O usuário deseja prosseguir mesmo com o aviso. Nenhuma ação específica de cancelamento ocorre, e o fluxo continua para as próximas etapas de verificação de saldo.
    * **Caminho `else ehCompativel`**: (Se o ativo for compatível com o perfil do usuário desde o início)
        * O fluxo prossegue diretamente para as etapas de verificação de saldo.

5.  **Continuação do Fluxo de Compra (se não cancelado):**
    * O `Controller` obtém os dados da `:Carteira` do usuário.
    * O `Controller` pede à `:Carteira` para `calcularValorCompra`.
    * O `Controller` pede à `:Carteira` para `verificarSaldoSuficiente`.

6.  **Tratamento do Saldo (Bloco `alt Saldo Suficiente / else Saldo Insuficiente`):**
    * **Caminho "Saldo Suficiente":**
        * O `Controller` instrui a `:Carteira` a `efetuarCompra`.
        * Dentro da `Carteira`:
            * A quantidade do ativo é atualizada na classe de ligação `:AtivoCarteira`.
            * Um novo objeto `:Transacao` é criado (`create participant`) para registrar os detalhes da compra.
            * O `valorTotal` é subtraído do saldo da `:Carteira`.
        * A `Carteira` confirma ao `Controller` que a `compraRealizada` foi bem-sucedida.
        * O `Controller` envia uma mensagem de sucesso para a `Tela`, que a exibe ao `Usuario`.
    * **Caminho `else Saldo Insuficiente`**:
        * O `Controller` envia uma mensagem de erro de saldo insuficiente para a `Tela`, que a exibe ao `Usuario`.

7.  **Finalização:**
    * Ao final de cada caminho possível (compra bem-sucedida ou falha por saldo insuficiente, assumindo que não houve cancelamento anterior), os participantes principais `:Controller` e `:Tela` são desativados.

**Conclusão do Diagrama:**
Este diagrama de sequência detalha o fluxo completo e condicional da compra de um ativo. Ele visualiza como o sistema lida com a verificação de compatibilidade do ativo com o perfil do investidor (incluindo a interação para confirmação do usuário) e a subsequente verificação de saldo, antes de efetivar a transação e atualizar os dados do usuário. A estrutura utiliza os blocos `alt` e `opt` (implicitamente, pois o primeiro `alt` cobre o `opt` da incompatibilidade) para representar os diferentes caminhos lógicos, seguindo a sintaxe PlantUML.